{"version":3,"sources":["components/Dog.js","components/Register.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Dog","useState","dog","setDog","onSubmit","value","a","window","ethereum","web3","Web3","providers","WebsocketProvider","setting","Ethereum","Node","contract","eth","Contract","dogsERC721","abi","ContractAddress","puppy","methods","getPuppy","index","encodeABI","console","log","parameters","from","selectedAddress","gasPrice","GasPrice","gas","GasLimit","to","data","request","method","params","txHash","decodeParameters","JSON","stringify","className","Card","style","width","margin","float","Body","initialValues","Group","Label","id","name","placeholder","Button","variant","type","Register","error","setError","showError","setShowError","accounts","addPuppy","dob","microchip","damID","sireID","sex","ownerPublicKey","transactionParameters","chainId","Header","as","Alert","show","href","Routes","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d05276f4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { Form as BForm, Button, Card } from \"react-bootstrap\";\nimport Web3 from \"web3\";\nimport dogsERC721 from \"../build/contracts/DogERC721.json\";\nimport setting from \"../setting.json\";\n\nexport default function Dog() {\n  const [dog, setDog] = useState([]);\n  const onSubmit = async (value) => {\n    const { ethereum } = window;\n    try {\n      const web3 = new Web3(\n        new Web3.providers.WebsocketProvider(setting.Ethereum.Node)\n      );\n      const contract = new web3.eth.Contract(\n        dogsERC721.abi,\n        setting.Ethereum.ContractAddress\n      );\n      const puppy = contract.methods.getPuppy(value.index).encodeABI();\n      console.log(puppy);\n\n      const parameters = {\n        from: ethereum.selectedAddress, // must match user's active address.\n        gasPrice: setting.Ethereum.GasPrice, // customizable by user during MetaMask confirmation.\n        gas: setting.Ethereum.GasLimit, // customizable by user during MetaMask confirmation.\n        to: setting.Ethereum.ContractAddress, // Required except during contract publications.\n        value: \"0x00\", // Only required to send ether to the recipient from the initiating external account.\n        data: puppy, // Optional, but used for defining smart contract creation and interaction.\n      };\n\n      console.log(parameters);\n      // txHash is a hex string\n      // As with any RPC call, it may throw an error\n      const txHash = await ethereum.request({\n        method: \"eth_call\",\n        params: [parameters, \"latest\"],\n      });\n\n      const dog = web3.eth.abi.decodeParameters(\n        [\"string\", \"uint256\", \"uint8\", \"uint256\", \"uint256\"],\n        txHash\n      );\n      console.log(dog);\n      setDog(JSON.stringify(dog));\n    } catch (error) {\n      console.log(error);\n    }\n\n    //const getDog = contract.methods.getPuppy(value.index).encodeABI();\n    //setDog(getDog);\n  };\n  return (\n    <div className=\"mt-5\">\n      <div>\n        <Card\n          className=\"text-center\"\n          style={{ width: \"50rem\", margin: \"auto\", float: \"none\" }}\n        >\n          <Card.Body>\n            <Formik\n              initialValues={{\n                index: \"\",\n              }}\n              onSubmit={onSubmit}\n            >\n              <Form className=\"mt-5\">\n                <BForm.Group>\n                  <BForm.Label className=\"d-block my-3\">Index</BForm.Label>\n                  <Field\n                    id=\"index\"\n                    name=\"index\"\n                    placeholder=\"\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                </BForm.Group>\n\n                <Button variant=\"primary\" type=\"submit\">\n                  Submit\n                </Button>\n              </Form>\n            </Formik>\n          </Card.Body>\n        </Card>\n      </div>\n      {dog ? <div>Dogs:{dog}</div> : <div>not found</div>}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { Form as BForm, Button, Card, Alert } from \"react-bootstrap\";\nimport setting from \"../setting.json\";\nimport dogsERC721 from \"../build/contracts/DogERC721.json\";\nimport { Link } from \"react-router-dom\";\nimport Web3 from \"web3\";\n\nexport default function Register() {\n  const [error, setError] = useState();\n  const [showError, setShowError] = useState(false);\n  const onSubmit = async (value) => {\n    const { ethereum } = window;\n\n    if (typeof window.ethereum === \"undefined\") {\n      setError(\"MetaMask not installed!\");\n      setShowError(true);\n      return false;\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n    const account = accounts[2];\n    if (account === \"\") {\n      setError(\"MetaMask account not found!\");\n      setShowError(true);\n      return false;\n    }\n    try {\n      const web3 = new Web3(\n        new Web3.providers.WebsocketProvider(setting.Ethereum.Node)\n      );\n      const contract = new web3.eth.Contract(\n        dogsERC721.abi,\n        setting.Ethereum.ContractAddress\n      );\n\n      const puppy = contract.methods\n        .addPuppy(\n          value.name,\n          value.dob,\n          value.microchip,\n          value.damID,\n          value.sireID,\n          value.sex,\n          value.ownerPublicKey\n        )\n        .encodeABI();\n\n      console.log(puppy);\n      const transactionParameters = {\n        from: ethereum.selectedAddress, // must match user's active address.\n        gasPrice: setting.Ethereum.GasPrice, // customizable by user during MetaMask confirmation.\n        gas: setting.Ethereum.GasLimit, // customizable by user during MetaMask confirmation.\n        to: setting.Ethereum.ContractAddress, // Required except during contract publications.\n        value: \"0x00\", // Only required to send ether to the recipient from the initiating external account.\n        data: puppy, // Optional, but used for defining smart contract creation and interaction.\n        chainId: 3, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n      };\n\n      // txHash is a hex string\n      // As with any RPC call, it may throw an error\n      const txHash = await ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      setError(\"Dog added\");\n      setShowError(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <div className=\"mt-5\">\n      <div>\n        <Card\n          className=\"text-center\"\n          style={{ width: \"50rem\", margin: \"auto\", float: \"none\" }}\n        >\n          <Card.Header as=\"h5\">Register your dog on the blockchain</Card.Header>\n          <Card.Body>\n            <Alert variant=\"danger\" show={showError}>\n              {error}\n            </Alert>\n            <Formik\n              initialValues={{\n                name: \"\",\n                dob: \"\",\n                sex: \"\",\n                microchip: \"\",\n                damID: \"\",\n                sireID: \"\",\n                ownerPublicKey: \"\",\n              }}\n              onSubmit={onSubmit}\n            >\n              <Form className=\"mt-5\">\n                <BForm.Group>\n                  <BForm.Label className=\"d-block my-3\">Name</BForm.Label>\n                  <Field\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                </BForm.Group>\n                <BForm.Group>\n                  <BForm.Label className=\"d-block my-3\">DOB</BForm.Label>\n                  <Field\n                    id=\"dob\"\n                    name=\"dob\"\n                    placeholder=\"\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                </BForm.Group>\n                <BForm.Group>\n                  <Field\n                    type=\"radio\"\n                    id=\"sex\"\n                    name=\"sex\"\n                    value=\"0\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                  <BForm.Label className=\"d-block my-3\">Male</BForm.Label>\n                  <Field\n                    type=\"radio\"\n                    id=\"sex\"\n                    name=\"sex\"\n                    value=\"1\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                  <BForm.Label className=\"d-block my-3\">Female</BForm.Label>\n                </BForm.Group>\n                <BForm.Group>\n                  <BForm.Label className=\"d-block my-3\">Microchip</BForm.Label>\n                  <Field\n                    id=\"microchip\"\n                    name=\"microchip\"\n                    placeholder=\"\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                </BForm.Group>\n                <BForm.Group>\n                  <BForm.Label className=\"d-block my-3\">Dam ID</BForm.Label>\n                  <Field\n                    id=\"damID\"\n                    name=\"damID\"\n                    placeholder=\"\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                </BForm.Group>\n                <BForm.Group>\n                  <BForm.Label className=\"d-block my-3\">Sire ID</BForm.Label>\n                  <Field\n                    id=\"sireID\"\n                    name=\"sireID\"\n                    placeholder=\"\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                </BForm.Group>\n                <BForm.Group>\n                  <BForm.Label className=\"d-block my-3\">\n                    Owner Public Key\n                  </BForm.Label>\n                  <Field\n                    id=\"ownerPublicKey\"\n                    name=\"ownerPublicKey\"\n                    placeholder=\"\"\n                    className=\"d-block my-3 w-100\"\n                  />\n                </BForm.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                  Register\n                </Button>{\" \"}\n                <a href=\"/dog\">Search Dog</a>\n              </Form>\n            </Formik>\n          </Card.Body>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Dog from \"./components/Dog\";\nimport Register from \"./components/Register\";\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/register\" component={Register} />\n      <Route exact path=\"/dog\" component={Dog} />\n    </Switch>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Routes from \"../src/Routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}