{"version":3,"sources":["components/Dog.js","components/Register.js","App.js","serviceWorker.js","index.js"],"names":["Dog","useState","dog","setDog","onSubmit","value","a","window","ethereum","web3","Web3","providers","WebsocketProvider","setting","Ethereum","Node","contract","eth","Contract","dogsERC721","abi","ContractAddress","puppy","methods","getPuppy","index","encodeABI","parameters","from","selectedAddress","gasPrice","GasPrice","gas","GasLimit","to","data","request","method","params","txHash","decodeParameters","type","name","console","log","JSON","stringify","className","initialValues","Group","Label","id","placeholder","Button","variant","DOB","Sex","Microchip","DamID","Register","error","setError","showError","setShowError","setTxHash","showTxHash","setShowTxHash","accounts","addPuppy","dob","microchip","damID","sireID","sex","ownerPublicKey","transactionParameters","chainId","Alert","show","App","Boolean","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dab3ee3f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { Form as BForm, Button } from \"react-bootstrap\";\nimport Web3 from \"web3\";\nimport dogsERC721 from \"../build/contracts/DogERC721.json\";\nimport setting from \"../setting.json\";\n\nexport default function Dog() {\n  const [dog, setDog] = useState();\n  const onSubmit = async (value) => {\n    const { ethereum } = window;\n    try {\n      const web3 = new Web3(\n        new Web3.providers.WebsocketProvider(setting.Ethereum.Node)\n      );\n      const contract = new web3.eth.Contract(\n        dogsERC721.abi,\n        setting.Ethereum.ContractAddress\n      );\n      const puppy = contract.methods.getPuppy(value.index).encodeABI();\n      //console.log(puppy);\n\n      const parameters = {\n        from: ethereum.selectedAddress, // must match user's active address.\n        gasPrice: setting.Ethereum.GasPrice, // customizable by user during MetaMask confirmation.\n        gas: setting.Ethereum.GasLimit, // customizable by user during MetaMask confirmation.\n        to: setting.Ethereum.ContractAddress, // Required except during contract publications.\n        value: \"0x00\", // Only required to send ether to the recipient from the initiating external account.\n        data: puppy, // Optional, but used for defining smart contract creation and interaction.\n      };\n\n      //console.log(parameters);\n      // txHash is a hex string\n      // As with any RPC call, it may throw an error\n      const txHash = await ethereum.request({\n        method: \"eth_call\",\n        params: [parameters, \"latest\"],\n      });\n\n      const dog = web3.eth.abi.decodeParameters(\n        [\n          { type: \"string\", name: \"Name\" },\n          { type: \"uint256\", name: \"DOB\" },\n          { type: \"uint8\", name: \"Sex\" },\n          { type: \"uint256\", name: \"Microchip\" },\n          { type: \"uint256\", name: \"DamID\" },\n        ],\n        txHash\n      );\n      console.log(JSON.stringify(dog));\n      setDog(JSON.stringify(dog));\n    } catch (error) {\n      console.log(error);\n    }\n\n    //const getDog = contract.methods.getPuppy(value.index).encodeABI();\n    //setDog(getDog);\n  };\n  return (\n    <>\n      <div className=\"dog\">\n        <h2>Search dog</h2>\n        <Formik\n          initialValues={{\n            index: \"\",\n          }}\n          onSubmit={onSubmit}\n        >\n          <Form className=\"mt-5\">\n            <BForm.Group>\n              <BForm.Label className=\"d-block my-3\">Index</BForm.Label>\n              <Field\n                id=\"index\"\n                name=\"index\"\n                placeholder=\"\"\n                className=\"d-block my-3 w-100\"\n              />\n            </BForm.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        </Formik>\n        <p></p>\n        {dog ? (\n          <div>\n            <label>Name:{dog[0].name}</label>\n            <p></p>\n            <label>DOB:{dog[0].DOB}</label>\n            <p></p>\n            <label>Sex:{dog[0].Sex}</label>\n            <p></p>\n            <label>Microchip:{dog[0].Microchip}</label>\n            <p></p>\n            <label>Dam ID:{dog[0].DamID}</label>\n            <p></p>\n            <label>Sire ID:{dog[0].name}</label>\n          </div>\n        ) : (\n          <div></div>\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { Form as BForm, Button, Alert } from \"react-bootstrap\";\nimport setting from \"../setting.json\";\nimport dogsERC721 from \"../build/contracts/DogERC721.json\";\nimport Web3 from \"web3\";\n\nexport default function Register() {\n  const [error, setError] = useState();\n  const [showError, setShowError] = useState(false);\n  const [txHash, setTxHash] = useState();\n  const [showTxHash, setShowTxHash] = useState(false);\n  const onSubmit = async (value) => {\n    console.log(value);\n    const { ethereum } = window;\n\n    if (typeof window.ethereum === \"undefined\") {\n      setError(\"MetaMask not installed!\");\n      setShowError(true);\n      return false;\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n    const account = accounts[2];\n    if (account === \"\") {\n      setError(\"MetaMask account not found!\");\n      setShowError(true);\n      return false;\n    }\n    try {\n      const web3 = new Web3(\n        new Web3.providers.WebsocketProvider(setting.Ethereum.Node)\n      );\n      const contract = new web3.eth.Contract(\n        dogsERC721.abi,\n        setting.Ethereum.ContractAddress\n      );\n\n      const puppy = contract.methods\n        .addPuppy(\n          value.name,\n          value.dob,\n          value.microchip,\n          value.damID,\n          value.sireID,\n          value.sex,\n          value.ownerPublicKey\n        )\n        .encodeABI();\n\n      console.log(puppy);\n      const transactionParameters = {\n        from: ethereum.selectedAddress, // must match user's active address.\n        gasPrice: setting.Ethereum.GasPrice, // customizable by user during MetaMask confirmation.\n        gas: setting.Ethereum.GasLimit, // customizable by user during MetaMask confirmation.\n        to: setting.Ethereum.ContractAddress, // Required except during contract publications.\n        value: \"0x00\", // Only required to send ether to the recipient from the initiating external account.\n        data: puppy, // Optional, but used for defining smart contract creation and interaction.\n        chainId: 3, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n      };\n\n      // txHash is a hex string\n      // As with any RPC call, it may throw an error\n      const txHash = await ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      setTxHash(txHash);\n      setShowTxHash(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"register\">\n      <h2>Register your dog on the blockchain</h2>\n      <Alert variant=\"danger\" show={showError}>\n        {error}\n      </Alert>\n      <Alert variant=\"primary\" show={showTxHash}>\n        {txHash}\n      </Alert>\n      <Formik\n        initialValues={{\n          name: \"\",\n          dob: \"\",\n          sex: \"\",\n          microchip: \"\",\n          damID: \"\",\n          sireID: \"\",\n          ownerPublicKey: \"\",\n        }}\n        onSubmit={onSubmit}\n      >\n        <Form className=\"mt-5\">\n          <BForm.Group>\n            <BForm.Label className=\"d-block my-3\">Name</BForm.Label>\n            <Field\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"\"\n              className=\"d-block my-3 w-100\"\n            />\n          </BForm.Group>\n          <BForm.Group>\n            <BForm.Label className=\"d-block my-3\">DOB</BForm.Label>\n            <Field\n              id=\"dob\"\n              name=\"dob\"\n              placeholder=\"\"\n              className=\"d-block my-3 w-100\"\n            />\n          </BForm.Group>\n          <BForm.Group>\n            <BForm.Label>\n              <Field type=\"radio\" id=\"sex\" name=\"sex\" value=\"0\" />\n              Male\n            </BForm.Label>\n            <BForm.Label>\n              <Field type=\"radio\" id=\"sex\" name=\"sex\" value=\"1\" />\n              Female\n            </BForm.Label>\n          </BForm.Group>\n          <BForm.Group>\n            <BForm.Label className=\"d-block my-3\">Microchip</BForm.Label>\n            <Field\n              id=\"microchip\"\n              name=\"microchip\"\n              placeholder=\"\"\n              className=\"d-block my-3 w-100\"\n            />\n          </BForm.Group>\n          <BForm.Group>\n            <BForm.Label className=\"d-block my-3\">Dam ID</BForm.Label>\n            <Field\n              id=\"damID\"\n              name=\"damID\"\n              placeholder=\"\"\n              className=\"d-block my-3 w-100\"\n            />\n          </BForm.Group>\n          <BForm.Group>\n            <BForm.Label className=\"d-block my-3\">Sire ID</BForm.Label>\n            <Field\n              id=\"sireID\"\n              name=\"sireID\"\n              placeholder=\"\"\n              className=\"d-block my-3 w-100\"\n            />\n          </BForm.Group>\n          <BForm.Group>\n            <BForm.Label className=\"d-block my-3\">Owner Public Key</BForm.Label>\n            <Field\n              id=\"ownerPublicKey\"\n              name=\"ownerPublicKey\"\n              placeholder=\"\"\n              className=\"d-block my-3 w-100\"\n            />\n          </BForm.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Register\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Dog from \"./components/Dog\";\nimport Register from \"./components/Register\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Digital dog</h1>\n      </header>\n      <div className=\"content\">\n        <Register />\n        <Dog />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={`${process.env.PUBLIC_URL}`}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}